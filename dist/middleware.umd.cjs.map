{"version":3,"file":"middleware.umd.cjs","sources":["../src/Middleware.ts","../src/MiddlewareRegistry.ts","../src/utils.ts","../src/MiddlewareRoute.ts","../index.ts"],"sourcesContent":["import type { NavigationGuardNext, RouteLocationNormalized } from 'vue-router';\nimport { ValidatorCallback } from './MiddlewareRoute';\n\nexport default class Middleware {    \n    readonly args: string|any[];\n    \n    constructor(\n        readonly validator: ValidatorCallback, readonly key?: string, args?: string|any[]) {\n        this.validator = validator;\n        this.args = typeof args === 'string'\n            ? args.split(',')\n            : [].concat(...args || []);\n    }\n\n    async validate(to: RouteLocationNormalized, from: RouteLocationNormalized, next: NavigationGuardNext) {\n        return await this.validator(to, from, next, ...this.args);\n    }\n}","import Middleware from './Middleware';\nimport { Validator, ValidatorCallback } from './MiddlewareRoute';\n\nexport declare type Alias = string;\nexport declare type Group = (string|Validator)[];\n\nexport default class MiddlewareRegistry {\n\n    protected aliases: Map<string,ValidatorCallback>;\n\n    protected groups: Map<string,any>;\n\n    protected middlewares: Middleware[] = [];\n\n    protected priorities: Validator[] = [];\n\n    constructor() {\n        this.aliases = new Map;\n        this.middlewares = [];\n        this.groups = new Map;\n        this.priorities = [];\n    }\n\n    alias(key: string, value: ValidatorCallback) {\n        this.aliases.set(key, value);\n\n        return this;\n    }\n\n    group(key: string, value: Group) {\n        this.groups.set(key, value);\n\n        return this;\n    }\n\n    middleware(value: Middleware): this {\n        this.middlewares.push(value);\n\n        return this;\n    }\n\n    priority(priority: Validator[]): this {\n        this.priorities = priority;\n\n        return this;\n    }\n    \n    prioritize(subject: Middleware[]): Middleware[] {\n        return subject.sort((a, b) => {\n            const aIndex = this.priorities.indexOf(a.key || a.validator),\n                bIndex = this.priorities.indexOf(b.key || b.validator);\n\n            if(aIndex > -1 && bIndex > -1) {\n                return aIndex < bIndex ? -1 : 1;\n            }\n    \n            return aIndex > -1 ? -1 : 1;\n        }); \n    }\n\n    resolve(subjects: (Middleware|Validator)[]): Middleware[] {\n        return subjects.map(value => {\n            if(value instanceof Middleware) {\n                return value;\n            }\n            \n            if(typeof value === 'function') {\n                return new Middleware(value);\n            }\n\n            const [ key, args ] = this.definition(value);\n        \n            const alias = this.aliases.get(key);\n\n            if(alias) {\n                return new Middleware(alias, key, args);\n            }\n            \n            return this.resolve(this.groups.get(key));\n        }).flat(1);\n    }\n\n    definition(value: string): [string, string[]] {\n        const [ key, args ] = value.split(':');\n\n        return [\n            key, args ? args.split('.') : []\n        ];\n    }\n\n    prioritized(validators: Validator[]): Middleware[] {\n        const resolved = this.resolve([\n            ...this.middlewares,\n            ...validators\n        ]).filter(value => value instanceof Middleware);\n\n        return this.prioritize(resolved);\n    }\n\n}","import type { RouteLocationNormalized } from 'vue-router';\nimport Middleware from './Middleware';\nimport { ValidatorResponse } from './MiddlewareRoute';\n\nconst MATCH_PATTERN = /^on_?([A-Z]?[a-z]+)?/;\n\nexport function qualifyCallbackKey(key: string) {\n    const matches = key.match(MATCH_PATTERN);\n\n    return (matches && matches[1] ? matches[1] : key).toLowerCase();\n}\n\nexport function validate(middlewares: Middleware[], to: RouteLocationNormalized, from: RouteLocationNormalized): Promise<ValidatorResponse> {\n    return new Promise(async(resolve, reject) => {\n        const subjects = [...middlewares];\n    \n        return function run(status: ValidatorResponse) {\n            const middleware = subjects.shift();\n\n            if(!middleware) {\n                return resolve(status);\n            }\n            \n            return middleware.validate(to, from, (status: ValidatorResponse) => {\n                if(status instanceof Error) {\n                    reject(status);\n                }\n                else if(status === false) {\n                    reject(new Error(`Cancelling navigation to ${to.path}!`));\n                }\n                else if([true, undefined].includes(<any> status)) {\n                    run(status);\n                }\n                else {\n                    resolve(status);\n                }\n            });\n        }();\n    });\n}","import { Component, ComponentPublicInstance } from 'vue';\nimport type { NavigationGuardNext, RouteLocationNormalized, RouteLocationRaw, RouteRecordRaw, RouteRecordRedirectOption, _RouteRecordBase } from 'vue-router';\nimport MiddlewareRegistry from './MiddlewareRegistry';\nimport { validate } from './utils';\n\nexport type RouteRecordName = string | symbol;\nexport type ValidatorCallback = (to: RouteLocationNormalized, from: RouteLocationNormalized, next: NavigationGuardNext, ...args: (string|undefined)[]) => void;\nexport type ValidatorString = string;\nexport type Validator = ValidatorCallback | ValidatorString;\n\nexport type NavigationGuardReturn = void | Error | RouteLocationRaw | boolean | NavigationGuardNext;\n\nexport interface NavigationGuardWithThis<T> {\n    (this: T, to: RouteLocationNormalized, from: RouteLocationNormalized, next: NavigationGuardNext): NavigationGuardReturn | Promise<NavigationGuardReturn>;\n}\n\nexport type ValidatorResponse = void | Error | RouteLocationRaw | boolean | ((vm: ComponentPublicInstance) => any) | string;\n\nexport type MiddlewarePromiseCallback = (promise: Promise<ValidatorResponse>, payload: MiddlewarePromiseCallbackPayload) => void;\n\nexport declare type MiddlewarePromiseCallbackPayload = {\n    status?: ValidatorResponse,\n    error?: Error,\n    to: RouteLocationRaw,\n    from: RouteLocationRaw,\n    next: NavigationGuardNext\n}\n\nexport type RouteRecordProps = boolean | Record<string, any> | ((to: RouteLocationNormalized) => Record<string, any>);\n\ntype Lazy<T> = () => Promise<T>;\n\ntype RawRouteComponent = RouteComponent | Lazy<RouteComponent>;\n\nexport type RouteComponent = Component;\n\nabstract class MiddlewareRoute  {\n    /**\n     * Path of the record. Should start with `/` unless the record is the child of\n     * another record.\n     *\n     * @example `/users/:id` matches `/users/1` as well as `/users/posva`.\n     */\n    path: string;\n\n    /**\n     * Aliases for the record. Allows defining extra paths that will behave like a\n     * copy of the record. Allows having paths shorthands like `/users/:id` and\n     * `/u/:id`. All `alias` and `path` values must share the same params.\n     */\n    alias?: RouteRecordRaw['alias'] = [];\n\n    /**\n     * Name for the route record.\n     */\n    name?: RouteRecordRaw['name'];\n\n    /**\n     * Before Enter guard specific to this record. Note `beforeEnter` has no\n     * effect if the record has a `redirect` property.\n     */\n    beforeEnter?: RouteRecordRaw['beforeEnter'];\n    \n    /**\n     * Arbitrary data attached to the record.\n     */\n    meta?: RouteRecordRaw['meta'];\n\n    /**\n     * The validators that should be ran before the route can resolve.\n     */\n\n    readonly validators: Validator[] = [];\n\n    /**\n     * The promise callbacks for the route resolver.\n     */\n    readonly callbacks: MiddlewarePromiseCallback[] = [];\n\n    /**\n     * Create the new middleware route instance.\n     */\n    constructor(\n        readonly registry: MiddlewareRegistry,\n        rawRoute: RouteRecordRaw\n    ) {\n        if(rawRoute.alias) {\n            this.alias = Array.isArray(rawRoute.alias) ? rawRoute.alias : [rawRoute.alias];\n        }\n\n        this.path = rawRoute.path;\n        this.name = rawRoute.name;\n        this.beforeEnter = rawRoute.beforeEnter;\n        this.meta = rawRoute.meta;\n\n        this.beforeEnter = async(to, from, next) => {\n            const promise = validate(this.middlewares, to, from);\n\n            for(const method of this.callbacks) {\n                method(promise, { to, from, next });\n            }\n\n            await promise.then(next).catch(e => {\n                // Ignore the error by default.\n            });\n        };\n    }\n\n    get middlewares() {\n        return this.registry.prioritized(this.validators);\n    }\n\n    /**\n     * Add a middleware to the route.\n     */\n    middleware(...validators: Validator[]): this {\n        for(const validator of validators.flat(1)) {\n            this.validators.push(validator);\n        }\n\n        return this;\n    }\n\n    /**\n     * Add a then handler to promise resolver.\n     */\n    catch(fn: (payload: MiddlewarePromiseCallbackPayload) => void): this {\n        this.callbacks.push((promise, { to, from, next }) => {\n            promise.catch(fn && (error => fn({ error, to, from, next })));\n        });\n\n        return this;\n    }\n\n    /**\n     * Add a then handler to promise resolver.\n     */\n    then(fn: (payload: MiddlewarePromiseCallbackPayload) => void, catchFn?: (payload: MiddlewarePromiseCallbackPayload) => void): this {\n        this.callbacks.push((promise, { to, from, next }) => {\n            promise.then(\n                fn && (status => fn({ status, to, from, next })),\n                catchFn && (error => catchFn({ error, to, from, next }))\n            );\n        });\n\n        return this;\n    }\n\n    /**\n     * Add a finally handler to promise resolver.\n     */\n    finally(fn: (payload: MiddlewarePromiseCallbackPayload) => void): this {\n        this.callbacks.push((promise, { to, from, next }) => {\n            promise.finally(fn && (() => fn({ to, from, next })));\n        });\n\n        return this;\n    }\n}\n\n/**\n * Route Record defining one single component with the `component` option.\n */\nexport interface RouteRecordSingleView extends _RouteRecordBase {\n    /**\n     * Component to display when the URL matches this route.\n     */\n    component: RawRouteComponent;\n    components?: never;\n    children?: never\n    redirect?: never;\n\n    /**\n     * Allow passing down params as props to the component rendered by `router-view`.\n     */\n    props?: RouteRecordProps;\n}\n\nexport class MiddlewareRouteSingleView extends MiddlewareRoute implements RouteRecordSingleView {\n    /**\n     * Component to display when the URL matches this route.\n     */\n    component: RawRouteComponent;\n    \n    /**\n     * Allow passing down params as props to the component rendered by `router-view`.\n     */\n    props?: RouteRecordProps;\n\n    /**\n     * Create the new middleware route instance.\n     */\n    constructor(\n        registry: MiddlewareRegistry,\n        rawRoute: RouteRecordSingleView\n    ) {\n        super(registry, rawRoute);\n\n        this.component = rawRoute.component;\n        this.props = rawRoute.props;\n    }\n}\n\n/**\n * Route Record defining one single component with a nested view.\n */\nexport interface RouteRecordSingleViewWithChildren extends _RouteRecordBase {\n    /**\n     * Component to display when the URL matches this route.\n     */\n    component?: RawRouteComponent | null | undefined;\n    components?: never;\n    children: RouteRecordRaw[];\n    /**\n     * Allow passing down params as props to the component rendered by `router-view`.\n     */\n    props?: RouteRecordProps;\n}\n\nexport class MiddlewareRouteSingleViewWithChildren extends MiddlewareRoute implements RouteRecordSingleViewWithChildren {\n    /**\n     * Component to display when the URL matches this route.\n     */\n    component?: RawRouteComponent | null | undefined;\n\n    /**\n     * Nested route records.\n     */\n    children: RouteRecordRaw[];\n    \n    /**\n     * Allow passing down params as props to the component rendered by `router-view`.\n     */\n    props?: RouteRecordProps;\n\n    /**\n     * Create the new middleware route instance.\n     */\n    constructor(\n        registry: MiddlewareRegistry,\n        rawRoute: RouteRecordSingleViewWithChildren\n    ) {\n        super(registry, rawRoute);\n\n        this.component = rawRoute.component;\n        this.children = rawRoute.children;\n        this.props = rawRoute.props;\n    }\n}\n\n/**\n * Route Record defining multiple named components with the `components` option.\n */\nexport interface RouteRecordMultipleViews extends _RouteRecordBase {\n    /**\n     * Components to display when the URL matches this route. Allow using named views.\n     */\n    components: Record<string, RawRouteComponent>;\n    component?: never;\n    redirect?: never;\n\n    /**\n     * Allow passing down params as props to the component rendered by\n     * `router-view`. Should be an object with the same keys as `components` or a\n     * boolean to be applied to every component.\n     */\n    props?: Record<string, RouteRecordProps> | boolean;\n}\n\nexport class MiddlewareRouteMultipleViews extends MiddlewareRoute implements RouteRecordMultipleViews {\n    /**\n     * Components to display when the URL matches this route. Allow using named views.\n     */\n    component?: never;\n    components: Record<string, RawRouteComponent>;\n    \n    /**\n     * Allow passing down params as props to the component rendered by\n     * `router-view`. Should be an object with the same keys as `components` or a\n     * boolean to be applied to every component.\n     */\n    props?: Record<string, RouteRecordProps> | boolean;\n\n    /**\n     * Create the new middleware route instance.\n     */\n    constructor(\n        readonly registry: MiddlewareRegistry,\n        readonly rawRoute: RouteRecordMultipleViews\n    ) {\n        super(registry, rawRoute);\n\n        this.components = rawRoute.components;\n        this.props = rawRoute.props;\n    }\n}\n\n/**\n * Route Record defining multiple named components with the `components` option and children.\n */\nexport interface RouteRecordMultipleViewsWithChildren extends _RouteRecordBase {\n    /**\n     * Components to display when the URL matches this route. Allow using named views.\n     */\n    components?: Record<string, RawRouteComponent> | null | undefined;\n    component?: never;\n    children: RouteRecordRaw[];\n    /**\n     * Allow passing down params as props to the component rendered by\n     * `router-view`. Should be an object with the same keys as `components` or a\n     * boolean to be applied to every component.\n     */\n    props?: Record<string, RouteRecordProps> | boolean;\n}\n\nexport class MiddlewareRouteMultipleViewsWithChildren extends MiddlewareRoute implements RouteRecordMultipleViewsWithChildren {\n    /**\n     * Components to display when the URL matches this route. Allow using named views.\n     */\n    components?: Record<string, RawRouteComponent> | null | undefined;\n    component?: never;\n    children: RouteRecordRaw[];\n    \n    /**\n     * Allow passing down params as props to the component rendered by\n     * `router-view`. Should be an object with the same keys as `components` or a\n     * boolean to be applied to every component.\n     */\n    props?: Record<string, RouteRecordProps> | boolean;\n\n    /**\n     * Create the new middleware route instance.\n     */\n    constructor(\n        readonly registry: MiddlewareRegistry,\n        readonly rawRoute: RouteRecordMultipleViewsWithChildren\n    ) {\n        super(registry, rawRoute);\n\n        this.components = rawRoute.components;\n        this.children = rawRoute.children;\n        this.props = rawRoute.props;\n    }\n}\n\n/**\n * Route Record that defines a redirect. Cannot have `component` or `components`\n * as it is never rendered.\n */\nexport interface RouteRecordRedirect extends _RouteRecordBase {\n    redirect: RouteRecordRedirectOption;\n    component?: never;\n    components?: never;\n    props?: never;\n}\n\nexport class MiddlewareRouteRedirect extends MiddlewareRoute implements RouteRecordRedirect {\n    redirect: RouteRecordRedirectOption;\n\n    /**\n     * Create the new middleware route instance.\n     */\n    constructor(\n        readonly registry: MiddlewareRegistry,\n        readonly rawRoute: RouteRecordRedirect\n    ) {\n        super(registry, rawRoute);\n\n        this.redirect = rawRoute.redirect;\n    }\n}\n","import type { RouteRecordRaw } from 'vue-router';\nimport Middleware from './src/Middleware';\nimport MiddlewareRegistry, { Group } from './src/MiddlewareRegistry';\nimport { MiddlewareRouteMultipleViews, MiddlewareRouteMultipleViewsWithChildren, MiddlewareRouteRedirect, MiddlewareRouteSingleView, MiddlewareRouteSingleViewWithChildren, Validator, ValidatorCallback } from './src/MiddlewareRoute';\n\nexport {\n    Middleware,\n    MiddlewareRegistry\n};\n\nexport const registrar = new MiddlewareRegistry;\n\nexport function alias(key: string, value: ValidatorCallback): MiddlewareRegistry {\n    return registrar.alias(key, value);        \n}\n\nexport function group(key: string, value: Group): MiddlewareRegistry {\n    return registrar.group(key, value);          \n}\n\nexport function middleware(value: Middleware): MiddlewareRegistry {\n    return registrar.middleware(value);          \n}\n\nexport function priority(priority: Validator[]): MiddlewareRegistry {\n    return registrar.priority(priority);  \n}\n\nexport function route(route: RouteRecordRaw) {\n    if(route.children && route.components) {\n        return new MiddlewareRouteMultipleViewsWithChildren(registrar, route);\n    }\n\n    if(route.children && route.component) {\n        return new MiddlewareRouteSingleViewWithChildren(registrar, route);\n    }\n\n    if(!route.children && route.components) {\n        return new MiddlewareRouteMultipleViews(registrar, route);\n    }\n\n    if(!route.children && route.component) {\n        return new MiddlewareRouteSingleView(registrar, route);\n    }\n\n    if(!route.children && route.redirect) {\n        return new MiddlewareRouteRedirect(registrar, route);\n    }\n\n    throw new Error('Invalid route!');\n}"],"names":["Middleware","validator","key","args","__publicField","to","from","next","MiddlewareRegistry","value","priority","subject","a","b","aIndex","bIndex","subjects","alias","validators","resolved","validate","middlewares","resolve","reject","run","status","middleware","MiddlewareRoute","registry","rawRoute","promise","method","e","fn","error","catchFn","MiddlewareRouteSingleView","MiddlewareRouteSingleViewWithChildren","MiddlewareRouteMultipleViews","MiddlewareRouteMultipleViewsWithChildren","MiddlewareRouteRedirect","registrar","group","route"],"mappings":"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"}