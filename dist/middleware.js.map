{"version":3,"file":"middleware.js","sources":["../src/Middleware.ts","../src/MiddlewareRegistry.ts","../src/utils.ts","../src/MiddlewareRoute.ts","../index.ts"],"sourcesContent":["import type { NavigationGuardNext, RouteLocationNormalized } from 'vue-router';\nimport { ValidatorCallback } from './MiddlewareRoute';\n\nexport default class Middleware {    \n    readonly args: string|any[];\n    \n    constructor(\n        readonly validator: ValidatorCallback, readonly key?: string, args?: string|any[]) {\n        this.validator = validator;\n        this.args = typeof args === 'string'\n            ? args.split(',')\n            : [].concat(...args || []);\n    }\n\n    async validate(to: RouteLocationNormalized, from: RouteLocationNormalized, next: NavigationGuardNext) {\n        return await this.validator(to, from, next, ...this.args);\n    }\n}","import Middleware from './Middleware';\nimport { Validator, ValidatorCallback } from './MiddlewareRoute';\n\nexport declare type Alias = string;\nexport declare type Group = (string|Validator)[];\n\nexport default class MiddlewareRegistry {\n\n    protected aliases: Map<string,ValidatorCallback>;\n\n    protected groups: Map<string,any>;\n\n    protected middlewares: Middleware[] = [];\n\n    protected priorities: Validator[] = [];\n\n    constructor() {\n        this.aliases = new Map;\n        this.middlewares = [];\n        this.groups = new Map;\n        this.priorities = [];\n    }\n\n    alias(key: string, value: ValidatorCallback) {\n        this.aliases.set(key, value);\n\n        return this;\n    }\n\n    group(key: string, value: Group) {\n        this.groups.set(key, value);\n\n        return this;\n    }\n\n    middleware(value: Middleware): this {\n        this.middlewares.push(value);\n\n        return this;\n    }\n\n    priority(priority: Validator[]): this {\n        this.priorities = priority;\n\n        return this;\n    }\n    \n    prioritize(subject: Middleware[]): Middleware[] {\n        return subject.sort((a, b) => {\n            const aIndex = this.priorities.indexOf(a.key || a.validator),\n                bIndex = this.priorities.indexOf(b.key || b.validator);\n\n            if(aIndex > -1 && bIndex > -1) {\n                return aIndex < bIndex ? -1 : 1;\n            }\n    \n            return aIndex > -1 ? -1 : 1;\n        }); \n    }\n\n    resolve(subjects: (Middleware|Validator)[]): Middleware[] {\n        return subjects.map(value => {\n            if(value instanceof Middleware) {\n                return value;\n            }\n            \n            if(typeof value === 'function') {\n                return new Middleware(value);\n            }\n\n            const [ key, args ] = this.definition(value);\n        \n            const alias = this.aliases.get(key);\n\n            if(alias) {\n                return new Middleware(alias, key, args);\n            }\n            \n            return this.resolve(this.groups.get(key));\n        }).flat(1);\n    }\n\n    definition(value: string): [string, string[]] {\n        const [ key, args ] = value.split(':');\n\n        return [\n            key, args ? args.split('.') : []\n        ];\n    }\n\n    prioritized(validators: Validator[]): Middleware[] {\n        const resolved = this.resolve([\n            ...this.middlewares,\n            ...validators\n        ]).filter(value => value instanceof Middleware);\n\n        return this.prioritize(resolved);\n    }\n\n}","import type { RouteLocationNormalized } from 'vue-router';\nimport Middleware from './Middleware';\nimport { ValidatorResponse } from './MiddlewareRoute';\n\nconst MATCH_PATTERN = /^on_?([A-Z]?[a-z]+)?/;\n\nexport function qualifyCallbackKey(key: string) {\n    const matches = key.match(MATCH_PATTERN);\n\n    return (matches && matches[1] ? matches[1] : key).toLowerCase();\n}\n\nexport function validate(middlewares: Middleware[], to: RouteLocationNormalized, from: RouteLocationNormalized): Promise<ValidatorResponse> {\n    return new Promise(async(resolve, reject) => {\n        const subjects = [...middlewares];\n    \n        return function run(status: ValidatorResponse) {\n            const middleware = subjects.shift();\n\n            if(!middleware) {\n                return resolve(status);\n            }\n            \n            return middleware.validate(to, from, (status: ValidatorResponse) => {\n                if(status instanceof Error) {\n                    reject(status);\n                }\n                else if(status === false) {\n                    reject(new Error(`Cancelling navigation to ${to.path}!`));\n                }\n                else if([true, undefined].includes(<any> status)) {\n                    run(status);\n                }\n                else {\n                    resolve(status);\n                }\n            });\n        }();\n    });\n}","import { Component, ComponentPublicInstance } from 'vue';\nimport type { NavigationGuardNext, RouteLocationNormalized, RouteLocationRaw, RouteRecordRaw, RouteRecordRedirectOption, _RouteRecordBase } from 'vue-router';\nimport MiddlewareRegistry from './MiddlewareRegistry';\nimport { validate } from './utils';\n\nexport type RouteRecordName = string | symbol;\nexport type ValidatorCallback = (to: RouteLocationNormalized, from: RouteLocationNormalized, next: NavigationGuardNext, ...args: (string|undefined)[]) => void;\nexport type ValidatorString = string;\nexport type Validator = ValidatorCallback | ValidatorString;\n\nexport type NavigationGuardReturn = void | Error | RouteLocationRaw | boolean | NavigationGuardNext;\n\nexport interface NavigationGuardWithThis<T> {\n    (this: T, to: RouteLocationNormalized, from: RouteLocationNormalized, next: NavigationGuardNext): NavigationGuardReturn | Promise<NavigationGuardReturn>;\n}\n\nexport type ValidatorResponse = void | Error | RouteLocationRaw | boolean | ((vm: ComponentPublicInstance) => any) | string;\n\nexport type MiddlewarePromiseCallback = (promise: Promise<ValidatorResponse>, payload: MiddlewarePromiseCallbackPayload) => void;\n\nexport declare type MiddlewarePromiseCallbackPayload = {\n    status?: ValidatorResponse,\n    error?: Error,\n    to: RouteLocationRaw,\n    from: RouteLocationRaw,\n    next: NavigationGuardNext\n}\n\nexport type RouteRecordProps = boolean | Record<string, any> | ((to: RouteLocationNormalized) => Record<string, any>);\n\ntype Lazy<T> = () => Promise<T>;\n\ntype RawRouteComponent = RouteComponent | Lazy<RouteComponent>;\n\nexport type RouteComponent = Component;\n\nabstract class MiddlewareRoute  {\n    /**\n     * Path of the record. Should start with `/` unless the record is the child of\n     * another record.\n     *\n     * @example `/users/:id` matches `/users/1` as well as `/users/posva`.\n     */\n    path: string;\n\n    /**\n     * Aliases for the record. Allows defining extra paths that will behave like a\n     * copy of the record. Allows having paths shorthands like `/users/:id` and\n     * `/u/:id`. All `alias` and `path` values must share the same params.\n     */\n    alias?: RouteRecordRaw['alias'] = [];\n\n    /**\n     * Name for the route record.\n     */\n    name?: RouteRecordRaw['name'];\n\n    /**\n     * Before Enter guard specific to this record. Note `beforeEnter` has no\n     * effect if the record has a `redirect` property.\n     */\n    beforeEnter?: RouteRecordRaw['beforeEnter'];\n    \n    /**\n     * Arbitrary data attached to the record.\n     */\n    meta?: RouteRecordRaw['meta'];\n\n    /**\n     * The validators that should be ran before the route can resolve.\n     */\n\n    readonly validators: Validator[] = [];\n\n    /**\n     * The promise callbacks for the route resolver.\n     */\n    readonly callbacks: MiddlewarePromiseCallback[] = [];\n\n    /**\n     * Create the new middleware route instance.\n     */\n    constructor(\n        readonly registry: MiddlewareRegistry,\n        rawRoute: RouteRecordRaw\n    ) {\n        if(rawRoute.alias) {\n            this.alias = Array.isArray(rawRoute.alias) ? rawRoute.alias : [rawRoute.alias];\n        }\n\n        this.path = rawRoute.path;\n        this.name = rawRoute.name;\n        this.beforeEnter = rawRoute.beforeEnter;\n        this.meta = rawRoute.meta;\n\n        this.beforeEnter = async(to, from, next) => {\n            const promise = validate(this.middlewares, to, from);\n\n            for(const method of this.callbacks) {\n                method(promise, { to, from, next });\n            }\n\n            await promise.then(next).catch(e => {\n                // Ignore the error by default.\n            });\n        };\n    }\n\n    get middlewares() {\n        return this.registry.prioritized(this.validators);\n    }\n\n    /**\n     * Add a middleware to the route.\n     */\n    middleware(...validators: Validator[]): this {\n        for(const validator of validators.flat(1)) {\n            this.validators.push(validator);\n        }\n\n        return this;\n    }\n\n    /**\n     * Add a then handler to promise resolver.\n     */\n    catch(fn: (payload: MiddlewarePromiseCallbackPayload) => void): this {\n        this.callbacks.push((promise, { to, from, next }) => {\n            promise.catch(fn && (error => fn({ error, to, from, next })));\n        });\n\n        return this;\n    }\n\n    /**\n     * Add a then handler to promise resolver.\n     */\n    then(fn: (payload: MiddlewarePromiseCallbackPayload) => void, catchFn?: (payload: MiddlewarePromiseCallbackPayload) => void): this {\n        this.callbacks.push((promise, { to, from, next }) => {\n            promise.then(\n                fn && (status => fn({ status, to, from, next })),\n                catchFn && (error => catchFn({ error, to, from, next }))\n            );\n        });\n\n        return this;\n    }\n\n    /**\n     * Add a finally handler to promise resolver.\n     */\n    finally(fn: (payload: MiddlewarePromiseCallbackPayload) => void): this {\n        this.callbacks.push((promise, { to, from, next }) => {\n            promise.finally(fn && (() => fn({ to, from, next })));\n        });\n\n        return this;\n    }\n}\n\n/**\n * Route Record defining one single component with the `component` option.\n */\nexport interface RouteRecordSingleView extends _RouteRecordBase {\n    /**\n     * Component to display when the URL matches this route.\n     */\n    component: RawRouteComponent;\n    components?: never;\n    children?: never\n    redirect?: never;\n\n    /**\n     * Allow passing down params as props to the component rendered by `router-view`.\n     */\n    props?: RouteRecordProps;\n}\n\nexport class MiddlewareRouteSingleView extends MiddlewareRoute implements RouteRecordSingleView {\n    /**\n     * Component to display when the URL matches this route.\n     */\n    component: RawRouteComponent;\n    \n    /**\n     * Allow passing down params as props to the component rendered by `router-view`.\n     */\n    props?: RouteRecordProps;\n\n    /**\n     * Create the new middleware route instance.\n     */\n    constructor(\n        registry: MiddlewareRegistry,\n        rawRoute: RouteRecordSingleView\n    ) {\n        super(registry, rawRoute);\n\n        this.component = rawRoute.component;\n        this.props = rawRoute.props;\n    }\n}\n\n/**\n * Route Record defining one single component with a nested view.\n */\nexport interface RouteRecordSingleViewWithChildren extends _RouteRecordBase {\n    /**\n     * Component to display when the URL matches this route.\n     */\n    component?: RawRouteComponent | null | undefined;\n    components?: never;\n    children: RouteRecordRaw[];\n    /**\n     * Allow passing down params as props to the component rendered by `router-view`.\n     */\n    props?: RouteRecordProps;\n}\n\nexport class MiddlewareRouteSingleViewWithChildren extends MiddlewareRoute implements RouteRecordSingleViewWithChildren {\n    /**\n     * Component to display when the URL matches this route.\n     */\n    component?: RawRouteComponent | null | undefined;\n\n    /**\n     * Nested route records.\n     */\n    children: RouteRecordRaw[];\n    \n    /**\n     * Allow passing down params as props to the component rendered by `router-view`.\n     */\n    props?: RouteRecordProps;\n\n    /**\n     * Create the new middleware route instance.\n     */\n    constructor(\n        registry: MiddlewareRegistry,\n        rawRoute: RouteRecordSingleViewWithChildren\n    ) {\n        super(registry, rawRoute);\n\n        this.component = rawRoute.component;\n        this.children = rawRoute.children;\n        this.props = rawRoute.props;\n    }\n}\n\n/**\n * Route Record defining multiple named components with the `components` option.\n */\nexport interface RouteRecordMultipleViews extends _RouteRecordBase {\n    /**\n     * Components to display when the URL matches this route. Allow using named views.\n     */\n    components: Record<string, RawRouteComponent>;\n    component?: never;\n    redirect?: never;\n\n    /**\n     * Allow passing down params as props to the component rendered by\n     * `router-view`. Should be an object with the same keys as `components` or a\n     * boolean to be applied to every component.\n     */\n    props?: Record<string, RouteRecordProps> | boolean;\n}\n\nexport class MiddlewareRouteMultipleViews extends MiddlewareRoute implements RouteRecordMultipleViews {\n    /**\n     * Components to display when the URL matches this route. Allow using named views.\n     */\n    component?: never;\n    components: Record<string, RawRouteComponent>;\n    \n    /**\n     * Allow passing down params as props to the component rendered by\n     * `router-view`. Should be an object with the same keys as `components` or a\n     * boolean to be applied to every component.\n     */\n    props?: Record<string, RouteRecordProps> | boolean;\n\n    /**\n     * Create the new middleware route instance.\n     */\n    constructor(\n        readonly registry: MiddlewareRegistry,\n        readonly rawRoute: RouteRecordMultipleViews\n    ) {\n        super(registry, rawRoute);\n\n        this.components = rawRoute.components;\n        this.props = rawRoute.props;\n    }\n}\n\n/**\n * Route Record defining multiple named components with the `components` option and children.\n */\nexport interface RouteRecordMultipleViewsWithChildren extends _RouteRecordBase {\n    /**\n     * Components to display when the URL matches this route. Allow using named views.\n     */\n    components?: Record<string, RawRouteComponent> | null | undefined;\n    component?: never;\n    children: RouteRecordRaw[];\n    /**\n     * Allow passing down params as props to the component rendered by\n     * `router-view`. Should be an object with the same keys as `components` or a\n     * boolean to be applied to every component.\n     */\n    props?: Record<string, RouteRecordProps> | boolean;\n}\n\nexport class MiddlewareRouteMultipleViewsWithChildren extends MiddlewareRoute implements RouteRecordMultipleViewsWithChildren {\n    /**\n     * Components to display when the URL matches this route. Allow using named views.\n     */\n    components?: Record<string, RawRouteComponent> | null | undefined;\n    component?: never;\n    children: RouteRecordRaw[];\n    \n    /**\n     * Allow passing down params as props to the component rendered by\n     * `router-view`. Should be an object with the same keys as `components` or a\n     * boolean to be applied to every component.\n     */\n    props?: Record<string, RouteRecordProps> | boolean;\n\n    /**\n     * Create the new middleware route instance.\n     */\n    constructor(\n        readonly registry: MiddlewareRegistry,\n        readonly rawRoute: RouteRecordMultipleViewsWithChildren\n    ) {\n        super(registry, rawRoute);\n\n        this.components = rawRoute.components;\n        this.children = rawRoute.children;\n        this.props = rawRoute.props;\n    }\n}\n\n/**\n * Route Record that defines a redirect. Cannot have `component` or `components`\n * as it is never rendered.\n */\nexport interface RouteRecordRedirect extends _RouteRecordBase {\n    redirect: RouteRecordRedirectOption;\n    component?: never;\n    components?: never;\n    props?: never;\n}\n\nexport class MiddlewareRouteRedirect extends MiddlewareRoute implements RouteRecordRedirect {\n    redirect: RouteRecordRedirectOption;\n\n    /**\n     * Create the new middleware route instance.\n     */\n    constructor(\n        readonly registry: MiddlewareRegistry,\n        readonly rawRoute: RouteRecordRedirect\n    ) {\n        super(registry, rawRoute);\n\n        this.redirect = rawRoute.redirect;\n    }\n}\n","import type { RouteRecordRaw } from 'vue-router';\nimport Middleware from './src/Middleware';\nimport MiddlewareRegistry, { Group } from './src/MiddlewareRegistry';\nimport { MiddlewareRouteMultipleViews, MiddlewareRouteMultipleViewsWithChildren, MiddlewareRouteRedirect, MiddlewareRouteSingleView, MiddlewareRouteSingleViewWithChildren, Validator, ValidatorCallback } from './src/MiddlewareRoute';\n\nexport {\n    Middleware,\n    MiddlewareRegistry\n};\n\nexport const registrar = new MiddlewareRegistry;\n\nexport function alias(key: string, value: ValidatorCallback): MiddlewareRegistry {\n    return registrar.alias(key, value);        \n}\n\nexport function group(key: string, value: Group): MiddlewareRegistry {\n    return registrar.group(key, value);          \n}\n\nexport function middleware(value: Middleware): MiddlewareRegistry {\n    return registrar.middleware(value);          \n}\n\nexport function priority(priority: Validator[]): MiddlewareRegistry {\n    return registrar.priority(priority);  \n}\n\nexport function route(route: RouteRecordRaw) {\n    if(route.children && route.components) {\n        return new MiddlewareRouteMultipleViewsWithChildren(registrar, route);\n    }\n\n    if(route.children && route.component) {\n        return new MiddlewareRouteSingleViewWithChildren(registrar, route);\n    }\n\n    if(!route.children && route.components) {\n        return new MiddlewareRouteMultipleViews(registrar, route);\n    }\n\n    if(!route.children && route.component) {\n        return new MiddlewareRouteSingleView(registrar, route);\n    }\n\n    if(!route.children && route.redirect) {\n        return new MiddlewareRouteRedirect(registrar, route);\n    }\n\n    throw new Error('Invalid route!');\n}"],"names":["Middleware","validator","key","args","__publicField","to","from","next","MiddlewareRegistry","value","priority","subject","a","b","aIndex","bIndex","subjects","alias","validators","resolved","validate","middlewares","resolve","reject","run","status","middleware","MiddlewareRoute","registry","rawRoute","promise","method","e","fn","error","catchFn","MiddlewareRouteSingleView","MiddlewareRouteSingleViewWithChildren","MiddlewareRouteMultipleViews","MiddlewareRouteMultipleViewsWithChildren","MiddlewareRouteRedirect","registrar","group","route"],"mappings":"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"}